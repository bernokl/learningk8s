** This is quick overview of what docker is

*** Lets go over a few practical things, Org allows literate programming and that means I can run the commands right in my documentation
Here is a quick example:
#+begin_src shell :results raw
pwd
#+end_src

*** The second neat thing we can do is to tangel a block of code into a file
#+begin_src yaml :tangle test/example.txt
Here is a file we tangled
You can create full bash scripts here
#+end_src

*** Lets confirm
#+begin_src shell :results raw
cat example.txt
#+end_src

* Lets tie things together
  We will be creating a very simple container.
  We will  push it to my dockerhub registry and then run it.

*** First I am going to create a very simple nodejs app that I can run in a container
#+begin_src nodejs :tangle app.js
const http = require('http');
const os = require('os');
console.log("Kubia server starting...");
var handler = function(request, response) {
  console.log("Received request from " + request.connection.remoteAddress);
  response.writeHead(200);
  response.end("You've hit " + os.hostname() + "\n");
};
var www = http.createServer(handler);
www.listen(8080);
#+end_src

*** Lets package it with a working environment and see what we get
#+begin_src yaml :tangle Dockerfile 
FROM node:7
ADD app.js /app.js
ENTRYPOINT ["node", "app.js"]
#+end_src

*** Lets use the docker build command to create our docker image
#+begin_src shell :results raw
docker build -t kubia .
#+end_src


*** Lets look if we can see the docker image
#+begin_src shell :results raw
docker images
#+end_src


*** Lets start a container with the kubia image
#+begin_src shell :results raw
docker run --name kubia-container -p 8080:8080 -d kubia
#+end_src


*** Lets see if we see it run
#+begin_src shell :results raw
docker ps
#+end_src


*** Now lets see if we can hit our container
#+begin_src shell :results raw
curl localhost:8080
#+end_src


*** Lets inspect our container
#+begin_src shell :results raw
docker inspect kubia-container
#+end_src

*** Lets go exploring inside the running container
#+begin_src shell :results raw
docker exec -it kubia-container bash
#+end_src

*** Lets clean up what we did by stopping and removing the container
#+begin_src shell :results raw
docker stop kubia-container
docker rm kubia-container
#+end_src


*** Last steps, lets build and push our container to my registry
#+begin_src shell :results raw
docker tag kubia bernokl/kubia
#+end_src


*** Did our images change?
#+begin_src shell :results raw
docker images
#+end_src


*** Push image to our repo so others can use it
#+begin_src shell :results raw
docker push bernokl/kubia
#+end_src


* Lets see if we can make this into a presentation
The theory is that this file gets a footnotes to set up reveal things
Aite, added the footnotes below, lets try to tangle it out the plan is to hit ", e e v b"


* Footnotes

#+REVEAL_ROOT: https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.9.2
# #+REVEAL_TITLE_SLIDE:
#+NOREVEAL_DEFAULT_FRAG_STYLE: YY
#+NOREVEAL_EXTRA_CSS: YY
#+NOREVEAL_EXTRA_JS: YY
#+REVEAL_HLEVEL: 2
#+REVEAL_MARGIN: 0.1
#+REVEAL_WIDTH: 1000
#+REVEAL_HEIGHT: 600
#+REVEAL_MAX_SCALE: 3.5
#+REVEAL_MIN_SCALE: 1.0
#+REVEAL_PLUGINS: (markdown notes highlight multiplex)
#+REVEAL_SLIDE_NUMBER: ""
#+REVEAL_SPEED: 1
#+REVEAL_THEME: sky
#+REVEAL_THEME_OPTIONS: beige|black|blood|league|moon|night|serif|simple|sky|solarized|white
#+REVEAL_TRANS: cube
#+REVEAL_TRANS_OPTIONS: none|cube|fade|concave|convex|page|slide|zoom

#+OPTIONS: num:nil
#+OPTIONS: toc:nil
#+OPTIONS: mathjax:Y
#+OPTIONS: reveal_single_file:nil
#+OPTIONS: reveal_control:t
#+OPTIONS: reveal-progress:t
#+OPTIONS: reveal_history:nil
#+OPTIONS: reveal_center:t
#+OPTIONS: reveal_rolling_links:nil
#+OPTIONS: reveal_keyboard:t
#+OPTIONS: reveal_overview:t
